# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                      ch.isbsib.proteomics.mzviz.controllers.UtilsController.hello

GET           /api-docs/exp                                          controllers.ApiHelpController.getResource(path = "/exp")
GET           /exp                                                   ch.isbsib.proteomics.mzviz.controllers.experimental.ExperimentalController.stats
GET           /exp/msruns                                            ch.isbsib.proteomics.mzviz.controllers.experimental.ExperimentalController.listMSRunIds
POST          /exp/msrun/:runId                                      ch.isbsib.proteomics.mzviz.controllers.experimental.ExperimentalController.loadMSRun(runId)
DELETE        /exp/msrun/:runId                                      ch.isbsib.proteomics.mzviz.controllers.experimental.ExperimentalController.deleteMSRun(runId)
GET           /exp/spectrum/:runId/:id                               ch.isbsib.proteomics.mzviz.controllers.experimental.ExperimentalController.findExpSpectrum(runId:String, id:String, sortByMoz:Option[Boolean], mostIntense:Option[Integer])
GET           /exp/spectra-ref/:runId                                ch.isbsib.proteomics.mzviz.controllers.experimental.ExperimentalController.findAllSpectraRefByRunId(runId)

GET           /api-docs/sequences                                    controllers.ApiHelpController.getResource(path = "/sequences")
GET           /sequences/list-sources                                ch.isbsib.proteomics.mzviz.controllers.theoretical.SequenceController.listSources
POST          /sequences/:sourceId/fasta                             ch.isbsib.proteomics.mzviz.controllers.theoretical.SequenceController.loadFasta(sourceId)
DELETE        /sequences/:sourceId                                   ch.isbsib.proteomics.mzviz.controllers.theoretical.SequenceController.deleteSource(sourceId)
GET           /sequences/stats                                       ch.isbsib.proteomics.mzviz.controllers.theoretical.SequenceController.stats

GET           /api-docs/sequence                                     controllers.ApiHelpController.getResource(path = "/sequence")
GET           /sequence/:sourceId/:identifier                        ch.isbsib.proteomics.mzviz.controllers.theoretical.OneSequenceController.get(sourceId, identifier)

GET           /api-docs/match                                        controllers.ApiHelpController.getResource(path = "/match")
POST          /match/psms/:searchId                                  ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.loadPsms(searchId:String, runId:Option[String])
GET           /match/psms/:searchId                                  ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.findAllPSMBySearchId(searchId)
GET           /match/searchInfo/:searchId                            ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.findAllSearchInfoBySearchId(searchId)
DELETE        /match/psms/:searchIds                                 ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.deleteAllBySearchId(searchIds)
GET           /match/searches                                        ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.listSearchIds
GET           /match/proteins/:searchIds                             ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.findAllProteinRefsBySearchIds(searchIds, withModif:Option[String])
GET           /match/modifications/:searchIds                        ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.findAllModificationsBySearchIds(searchIds)
GET           /match/psms/:searchIds/by-ac/:accessionCode            ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.findPSMByProtein(searchIds, accessionCode, sequenceSource:Option[String])
GET           /match/sim/:runId/:title/:scoreThresh/:matchTol        ch.isbsib.proteomics.mzviz.controllers.matches.PSMController.findSimilarSpectra(runId, title, scoreThresh, matchTol)

GET           /docs/*file                                            controllers.Assets.at(path="/public/docs", file)
GET           /api-docs                                              controllers.ApiHelpController.getResources